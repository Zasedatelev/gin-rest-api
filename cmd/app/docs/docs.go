// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Oleg Zasedatelev"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/login": {
            "post": {
                "description": "login user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "login user",
                "parameters": [
                    {
                        "description": "form data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_Oleg-OMON_gin-rest-api_git_internal_models.SingInInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "BAD REQUEST",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "NOT FOUND",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/games/all_games": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Get all games",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_Oleg-OMON_gin-rest-api_git_internal_models.Game"
                            }
                        }
                    }
                }
            }
        },
        "/api/games/all_players": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Get all players",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_Oleg-OMON_gin-rest-api_git_internal_models.Player"
                            }
                        }
                    }
                }
            }
        },
        "/api/games/get_player/{nickname}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves user based on given name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "player nickname",
                        "name": "nickname",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Oleg-OMON_gin-rest-api_git_internal_models.Player"
                        }
                    }
                }
            }
        },
        "/api/games/results_games/{nickname}": {
            "get": {
                "description": "get list by nickname",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "get games involving the player",
                "parameters": [
                    {
                        "type": "string",
                        "description": "player nickname",
                        "name": "nickname",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_Oleg-OMON_gin-rest-api_git_internal_models.ResultModelsPlayerLineup"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "post user",
                "tags": [
                    "auth"
                ],
                "summary": "register user",
                "parameters": [
                    {
                        "description": "form data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_Oleg-OMON_gin-rest-api_git_internal_models.SingUpInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "BAD REQUEST",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "NOT FOUND",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_Oleg-OMON_gin-rest-api_git_internal_models.Game": {
            "type": "object",
            "properties": {
                "city": {
                    "$ref": "#/definitions/null.String"
                },
                "gameDate": {
                    "type": "string"
                },
                "gameId": {
                    "type": "integer"
                },
                "goals": {
                    "$ref": "#/definitions/null.Uint"
                },
                "own": {
                    "$ref": "#/definitions/null.Uint"
                },
                "team": {
                    "type": "string"
                }
            }
        },
        "github_com_Oleg-OMON_gin-rest-api_git_internal_models.Player": {
            "type": "object",
            "properties": {
                "citizenship": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "dob": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "playerId": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "github_com_Oleg-OMON_gin-rest-api_git_internal_models.ResultModelsPlayerLineup": {
            "type": "object",
            "properties": {
                "cards": {
                    "$ref": "#/definitions/null.String"
                },
                "goals": {
                    "$ref": "#/definitions/null.Uint"
                },
                "nickname": {
                    "description": "Тут нужна композиция что бы не дублировать поля, а просто ссылать на их тип?",
                    "type": "string"
                },
                "start": {
                    "type": "string"
                },
                "team": {
                    "type": "string"
                },
                "timeIn": {
                    "$ref": "#/definitions/null.Float64"
                }
            }
        },
        "github_com_Oleg-OMON_gin-rest-api_git_internal_models.SingInInput": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "github_com_Oleg-OMON_gin-rest-api_git_internal_models.SingUpInput": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "passwordConfirm": {
                    "type": "string"
                }
            }
        },
        "null.Float64": {
            "type": "object",
            "properties": {
                "float64": {
                    "type": "number"
                },
                "valid": {
                    "description": "Valid is true if Float64 is not NULL",
                    "type": "boolean"
                }
            }
        },
        "null.String": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        },
        "null.Uint": {
            "type": "object",
            "properties": {
                "uint": {
                    "type": "integer"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "sql.NullString": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.20",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Test Golang API",
	Description:      "Привет. Мой не большой проект для изучения програмирования API на Go.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
